# Generated by Django 5.1.2 on 2024-10-30 20:32

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import presence.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AccessPoint",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "required_access_level",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Niveau d'accès requis"
                    ),
                ),
                (
                    "schedule",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Horaires d'accès"
                    ),
                ),
                (
                    "special_rules",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Règles spéciales"
                    ),
                ),
            ],
            options={
                "verbose_name": "Point d'accès",
                "verbose_name_plural": "Points d'accès",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="NFCReader",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "identifier",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Identifiant"
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Nom")),
                (
                    "location",
                    models.CharField(max_length=200, verbose_name="Emplacement"),
                ),
                (
                    "reader_type",
                    models.CharField(
                        choices=[
                            ("ENTRANCE", "Entrée"),
                            ("EXIT", "Sortie"),
                            ("BOTH", "Entrée/Sortie"),
                            ("SPECIAL", "Spécial"),
                        ],
                        default="BOTH",
                        max_length=20,
                        verbose_name="Type de lecteur",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Actif"),
                            ("INACTIVE", "Inactif"),
                            ("MAINTENANCE", "En maintenance"),
                            ("ERROR", "Erreur"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="Adresse IP"
                    ),
                ),
                (
                    "last_maintenance",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Dernière maintenance"
                    ),
                ),
                (
                    "next_maintenance",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Prochaine maintenance"
                    ),
                ),
                (
                    "firmware_version",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="Version du firmware"
                    ),
                ),
                (
                    "is_online",
                    models.BooleanField(default=True, verbose_name="En ligne"),
                ),
                (
                    "last_online",
                    models.DateTimeField(
                        auto_now=True, verbose_name="Dernière connexion"
                    ),
                ),
                (
                    "configuration",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Configuration"
                    ),
                ),
            ],
            options={
                "verbose_name": "Lecteur NFC",
                "verbose_name_plural": "Lecteurs NFC",
                "ordering": ["location", "name"],
            },
        ),
        migrations.CreateModel(
            name="Reportfolder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Nom du rapport"),
                ),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("presence", "Présence"),
                            ("department", "Département"),
                            ("user", "Utilisateur"),
                        ],
                        max_length=50,
                        verbose_name="Type de rapport",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=presence.models.report_file_path,
                        verbose_name="Fichier du rapport",
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        choices=[("csv", "CSV"), ("pdf", "PDF"), ("xlsx", "Excel")],
                        default="csv",
                        max_length=10,
                        verbose_name="Format",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "En attente"),
                            ("generating", "Génération en cours"),
                            ("completed", "Terminé"),
                            ("failed", "Échoué"),
                        ],
                        default="pending",
                        max_length=50,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "generated_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de génération"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, null=True, verbose_name="Message d'erreur"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AttendanceRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Horodatage"
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("ARRIVAL", "Arrivée"),
                            ("DEPARTURE", "Départ"),
                            ("PAUSE_START", "Début de pause"),
                            ("PAUSE_END", "Fin de pause"),
                            ("BREAK_START", "Début de break"),
                            ("BREAK_END", "Fin de break"),
                            ("TEMP_EXIT", "Sortie temporaire"),
                            ("TEMP_RETURN", "Retour temporaire"),
                        ],
                        max_length=20,
                        verbose_name="Type d'action",
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, null=True, verbose_name="Notes"),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="attendance_records",
                        to="presence.accesspoint",
                        verbose_name="Point d'accès",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_records",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Enregistrement de présence",
                "verbose_name_plural": "Enregistrements de présence",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Nom du département"),
                ),
                (
                    "code",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="Code du département"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="managed_departments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Responsable",
                    ),
                ),
            ],
            options={
                "verbose_name": "Département",
                "verbose_name_plural": "Départements",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="AttendanceRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Nom de la règle"),
                ),
                ("start_time", models.TimeField(verbose_name="Heure de début")),
                ("end_time", models.TimeField(verbose_name="Heure de fin")),
                (
                    "grace_period_minutes",
                    models.PositiveIntegerField(
                        default=15, verbose_name="Période de grâce (minutes)"
                    ),
                ),
                (
                    "minimum_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=8.0,
                        max_digits=4,
                        verbose_name="Heures minimum requises",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "department",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_rules",
                        to="presence.department",
                        verbose_name="Département",
                    ),
                ),
            ],
            options={
                "verbose_name": "Règle de présence",
                "verbose_name_plural": "Règles de présence",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AccessRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "name",
                    models.CharField(max_length=100, verbose_name="Nom de la règle"),
                ),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("TIME_BASED", "Basé sur le temps"),
                            ("ZONE_BASED", "Basé sur la zone"),
                            ("USER_BASED", "Basé sur l'utilisateur"),
                            ("TEMPORARY", "Temporaire"),
                            ("SPECIAL", "Spécial"),
                        ],
                        default="TIME_BASED",
                        max_length=20,
                        verbose_name="Type de règle",
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Priorité",
                    ),
                ),
                (
                    "conditions",
                    models.JSONField(default=dict, verbose_name="Conditions"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de début"
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de fin"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "access_point",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_rules",
                        to="presence.accesspoint",
                        verbose_name="Point d'accès",
                    ),
                ),
                (
                    "departments",
                    models.ManyToManyField(
                        blank=True,
                        related_name="access_rules",
                        to="presence.department",
                        verbose_name="Départements",
                    ),
                ),
            ],
            options={
                "verbose_name": "Règle d'accès",
                "verbose_name_plural": "Règles d'accès",
                "ordering": ["-priority", "name"],
            },
        ),
        migrations.AddField(
            model_name="accesspoint",
            name="allowed_departments",
            field=models.ManyToManyField(
                blank=True,
                related_name="accessible_points",
                to="presence.department",
                verbose_name="Départements autorisés",
            ),
        ),
        migrations.CreateModel(
            name="Leave",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "leave_type",
                    models.CharField(
                        choices=[
                            ("VACATION", "Congés payés"),
                            ("SICK", "Maladie"),
                            ("PERSONAL", "Personnel"),
                            ("OTHER", "Autre"),
                        ],
                        max_length=20,
                        verbose_name="Type de congé",
                    ),
                ),
                ("start_date", models.DateField(verbose_name="Date de début")),
                ("end_date", models.DateField(verbose_name="Date de fin")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "En attente"),
                            ("APPROVED", "Approuvé"),
                            ("REJECTED", "Rejeté"),
                            ("CANCELLED", "Annulé"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                ("reason", models.TextField(verbose_name="Motif")),
                (
                    "approval_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date d'approbation"
                    ),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True, null=True, verbose_name="Commentaires"
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_leaves",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approuvé par",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leaves",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Congé",
                "verbose_name_plural": "Congés",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="LogEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                ("action", models.CharField(max_length=255, verbose_name="Action")),
                (
                    "timestamp",
                    models.DateTimeField(auto_now_add=True, verbose_name="Horodatage"),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, null=True, verbose_name="Adresse IP"
                    ),
                ),
                (
                    "user_agent",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Agent utilisateur",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="log_entries",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LoginAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                ("ip_address", models.GenericIPAddressField(verbose_name="Adresse IP")),
                ("success", models.BooleanField(default=False, verbose_name="Succès")),
                (
                    "user_agent",
                    models.CharField(max_length=255, verbose_name="Agent utilisateur"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="login_attempts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tentative de connexion",
                "verbose_name_plural": "Tentatives de connexion",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NFCCard",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "card_uid",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="UID de la carte"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Actif"),
                            ("INACTIVE", "Inactif"),
                            ("LOST", "Perdu"),
                            ("STOLEN", "Volé"),
                            ("EXPIRED", "Expiré"),
                            ("DAMAGED", "Endommagé"),
                        ],
                        default="ACTIVE",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "issue_date",
                    models.DateField(
                        default=django.utils.timezone.now,
                        verbose_name="Date d'émission",
                    ),
                ),
                ("expiry_date", models.DateField(verbose_name="Date d'expiration")),
                (
                    "last_used",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Dernière utilisation"
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                (
                    "access_level",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Niveau d'accès"
                    ),
                ),
                (
                    "security_hash",
                    models.CharField(max_length=255, verbose_name="Hash de sécurité"),
                ),
                (
                    "notes",
                    models.TextField(blank=True, null=True, verbose_name="Notes"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nfc_card",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Carte NFC",
                "verbose_name_plural": "Cartes NFC",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="accesspoint",
            name="reader",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="access_point",
                to="presence.nfcreader",
                verbose_name="Lecteur NFC",
            ),
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                ("message", models.TextField(verbose_name="Message")),
                ("is_read", models.BooleanField(default=False, verbose_name="Lu")),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("missing_presence", "Présence Manquante"),
                            ("anomaly", "Anomalie"),
                            ("general", "Général"),
                            ("early_departure", "Abandon de Poste"),
                            ("missed_scan", "Oubli de Scan"),
                            ("extended_break", "Pause Prolongée"),
                        ],
                        max_length=50,
                        verbose_name="Type de notification",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Date de début"
                    ),
                ),
                (
                    "end_date",
                    models.DateField(blank=True, null=True, verbose_name="Date de fin"),
                ),
                (
                    "comments",
                    models.TextField(
                        blank=True, null=True, verbose_name="Commentaires"
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_notifications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approuvé par",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Destinataire",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PasswordReset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "token",
                    models.CharField(max_length=255, unique=True, verbose_name="Token"),
                ),
                ("used", models.BooleanField(default=False, verbose_name="Utilisé")),
                ("ip_address", models.GenericIPAddressField(verbose_name="Adresse IP")),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Créé le"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="password_resets",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Réinitialisation de mot de passe",
                "verbose_name_plural": "Réinitialisations de mot de passe",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PresenceHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "modified_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Modifié le"),
                ),
                (
                    "previous_action_type",
                    models.CharField(
                        choices=[
                            ("ARRIVAL", "Arrivée"),
                            ("DEPARTURE", "Départ"),
                            ("PAUSE_START", "Début de pause"),
                            ("PAUSE_END", "Fin de pause"),
                            ("BREAK_START", "Début de break"),
                            ("BREAK_END", "Fin de break"),
                            ("TEMP_EXIT", "Sortie temporaire"),
                            ("TEMP_RETURN", "Retour temporaire"),
                        ],
                        max_length=20,
                        verbose_name="Type d'action précédent",
                    ),
                ),
                (
                    "new_action_type",
                    models.CharField(
                        choices=[
                            ("ARRIVAL", "Arrivée"),
                            ("DEPARTURE", "Départ"),
                            ("PAUSE_START", "Début de pause"),
                            ("PAUSE_END", "Fin de pause"),
                            ("BREAK_START", "Début de break"),
                            ("BREAK_END", "Fin de break"),
                            ("TEMP_EXIT", "Sortie temporaire"),
                            ("TEMP_RETURN", "Retour temporaire"),
                        ],
                        max_length=20,
                        verbose_name="Nouveau type d'action",
                    ),
                ),
                ("reason", models.TextField(verbose_name="Raison de la modification")),
                (
                    "attendance_record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="presence.attendancerecord",
                        verbose_name="Enregistrement de présence",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="modified_presences",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifié par",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Report",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("ATTENDANCE", "Présence"),
                            ("SECURITY", "Sécurité"),
                            ("DEPARTMENT", "Département"),
                            ("USER", "Utilisateur"),
                            ("CUSTOM", "Personnalisé"),
                        ],
                        max_length=20,
                        verbose_name="Type de rapport",
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        choices=[
                            ("PDF", "PDF"),
                            ("EXCEL", "Excel"),
                            ("CSV", "CSV"),
                            ("HTML", "HTML"),
                        ],
                        default="PDF",
                        max_length=20,
                        verbose_name="Format",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "En attente"),
                            ("PROCESSING", "En cours"),
                            ("COMPLETED", "Terminé"),
                            ("ERROR", "Erreur"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Statut",
                    ),
                ),
                (
                    "parameters",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Paramètres"
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="reports/",
                        validators=[
                            django.core.validators.FileExtensionValidator(
                                allowed_extensions=["pdf", "xlsx", "csv", "html"]
                            )
                        ],
                        verbose_name="Fichier",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, null=True, verbose_name="Message d'erreur"
                    ),
                ),
                (
                    "generation_time",
                    models.DurationField(
                        blank=True, null=True, verbose_name="Temps de génération"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_reports",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Créé par",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rapport",
                "verbose_name_plural": "Rapports",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ReportSchedule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "frequency",
                    models.CharField(
                        choices=[
                            ("DAILY", "Quotidien"),
                            ("WEEKLY", "Hebdomadaire"),
                            ("MONTHLY", "Mensuel"),
                            ("QUARTERLY", "Trimestriel"),
                            ("ANNUAL", "Annuel"),
                        ],
                        max_length=20,
                        verbose_name="Fréquence",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Actif")),
                ("next_run", models.DateTimeField(verbose_name="Prochaine exécution")),
                (
                    "last_run",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Dernière exécution"
                    ),
                ),
                (
                    "send_empty",
                    models.BooleanField(default=False, verbose_name="Envoyer si vide"),
                ),
                (
                    "configuration",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="Configuration"
                    ),
                ),
                (
                    "recipients",
                    models.ManyToManyField(
                        related_name="report_subscriptions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Destinataires",
                    ),
                ),
                (
                    "report",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="schedules",
                        to="presence.report",
                        verbose_name="Rapport",
                    ),
                ),
            ],
            options={
                "verbose_name": "Planification de rapport",
                "verbose_name_plural": "Planifications de rapports",
                "ordering": ["next_run"],
            },
        ),
        migrations.CreateModel(
            name="TemporaryQRCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        unique=True,
                        verbose_name="Code QR",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                ("expires_at", models.DateTimeField(verbose_name="Expire le")),
                ("is_used", models.BooleanField(default=False, verbose_name="Utilisé")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="qr_codes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TwoFactorCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=6)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_used", models.BooleanField(default=False)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "matricule",
                    models.CharField(
                        max_length=20, unique=True, verbose_name="Matricule"
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("ADMIN", "Administrateur"),
                            ("STAFF", "Personnel"),
                            ("SECURITY", "Agent de sécurité"),
                        ],
                        default="STAFF",
                        max_length=20,
                        verbose_name="Rôle",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Numéro de téléphone",
                    ),
                ),
                (
                    "address",
                    models.TextField(blank=True, null=True, verbose_name="Adresse"),
                ),
                (
                    "emergency_contact",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Contact d'urgence",
                    ),
                ),
                (
                    "emergency_phone",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Téléphone d'urgence",
                    ),
                ),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to=presence.models.user_profile_image_path,
                        verbose_name="Photo de profil",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_profiles",
                        to="presence.department",
                        verbose_name="Département",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Profil utilisateur",
                "verbose_name_plural": "Profils utilisateurs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Créé le"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Mis à jour le"),
                ),
                (
                    "session_key",
                    models.CharField(
                        max_length=40, unique=True, verbose_name="Clé de session"
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(verbose_name="Adresse IP")),
                (
                    "user_agent",
                    models.CharField(max_length=255, verbose_name="Agent utilisateur"),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        verbose_name="Dernière activité",
                    ),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Session utilisateur",
                "verbose_name_plural": "Sessions utilisateurs",
                "ordering": ["-last_activity"],
            },
        ),
    ]
